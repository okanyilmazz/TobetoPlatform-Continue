// <auto-generated />
using System;
using DataAccess.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(TobetoPlatformContext))]
    partial class TobetoPlatformContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Core.Entities.OperationClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("OperationClaims", (string)null);
                });

            modelBuilder.Entity("Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FirstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LastName");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Password");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("PasswordHash");

                    b.Property<string>("PasswordReset")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PasswordReset");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("PasswordSalt");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("Status");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Email" }, "UK_Email")
                        .IsUnique();

                    b.HasIndex(new[] { "Id" }, "UK_Id")
                        .IsUnique();

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Core.Entities.UserOperationClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OperationClaimId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("OperationClaimId");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("OperationClaimId");

                    b.HasIndex("UserId");

                    b.ToTable("UserOperationClaims", (string)null);
                });

            modelBuilder.Entity("Entities.Concretes.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("BirthDate");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<string>("NationalId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NationalId");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PhoneNumber");

                    b.Property<string>("ProfilePhotoPath")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ProfilePhotoPath");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "UK_Id")
                        .IsUnique();

                    b.HasIndex(new[] { "UserId" }, "UK_UserId")
                        .IsUnique();

                    b.ToTable("Accounts", (string)null);
                });

            modelBuilder.Entity("Entities.Concretes.AccountActivityMap", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<Guid?>("AccountId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AccountId");

                    b.Property<Guid?>("ActivityId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ActivityId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ActivityId");

                    b.HasIndex(new[] { "Id" }, "UK_Id")
                        .IsUnique();

                    b.ToTable("AccountActivityMap", (string)null);
                });

            modelBuilder.Entity("Entities.Concretes.AccountAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AccountId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ExamId");

                    b.Property<string>("GivenAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("QuestionId");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ExamId");

                    b.HasIndex("QuestionId");

                    b.HasIndex(new[] { "Id" }, "UK_Id")
                        .IsUnique();

                    b.ToTable("AccountAnswers", (string)null);
                });

            modelBuilder.Entity("Entities.Concretes.AccountBadge", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<Guid?>("AccountId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AccountId");

                    b.Property<Guid?>("BadgeId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("BadgeId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("BadgeId");

                    b.HasIndex(new[] { "Id" }, "UK_Id")
                        .IsUnique();

                    b.ToTable("AccountBadges", (string)null);
                });

            modelBuilder.Entity("Entities.Concretes.AccountCompetenceTest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AccountId");

                    b.Property<Guid>("CompetenceTestId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CompetenceTestId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CompetenceTestId");

                    b.HasIndex(new[] { "Id" }, "UK_Id")
                        .IsUnique();

                    b.ToTable("AccountCompetenceTests", (string)null);
                });

            modelBuilder.Entity("Entities.Concretes.AccountEducationProgram", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AccountId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EducationProgramId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("EducationProgramId");

                    b.Property<double?>("StatusPercent")
                        .HasColumnType("float")
                        .HasColumnName("StatusPercent");

                    b.Property<int?>("TimeSpent")
                        .HasColumnType("int")
                        .HasColumnName("TimeSpent");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("EducationProgramId");

                    b.HasIndex(new[] { "Id" }, "UK_Id")
                        .IsUnique();

                    b.ToTable("AccountEducationPrograms", (string)null);
                });

            modelBuilder.Entity("Entities.Concretes.AccountFavoriteEducationProgram", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AccountId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EducationProgramId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("EducationProgramId");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("EducationProgramId");

                    b.HasIndex(new[] { "Id" }, "UK_Id")
                        .IsUnique();

                    b.ToTable("AccountFavoriteEducationPrograms", (string)null);
                });

            modelBuilder.Entity("Entities.Concretes.AccountHomework", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AccountId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("HomeworkId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("HomeworkId");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("Status");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("HomeworkId");

                    b.HasIndex(new[] { "Id" }, "UK_Id")
                        .IsUnique();

                    b.ToTable("AccountHomeworks", (string)null);
                });

            modelBuilder.Entity("Entities.Concretes.AccountLanguage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AccountId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LanguageId");

                    b.Property<Guid>("LanguageLevelId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LanguageLevelId");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("LanguageLevelId");

                    b.HasIndex(new[] { "Id" }, "UK_Id")
                        .IsUnique();

                    b.ToTable("AccountLanguages", (string)null);
                });

            modelBuilder.Entity("Entities.Concretes.AccountLesson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AccountId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LessonId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LessonId");

                    b.Property<double>("StatusPercent")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("LessonId");

                    b.HasIndex(new[] { "Id" }, "UK_Id")
                        .IsUnique();

                    b.ToTable("AccountLessons", (string)null);
                });

            modelBuilder.Entity("Entities.Concretes.AccountOccupationClass", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AccountId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OccupationClassId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("OccupationClassId");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("OccupationClassId");

                    b.HasIndex(new[] { "Id" }, "UK_Id")
                        .IsUnique();

                    b.ToTable("AccountOccupationClasses", (string)null);
                });

            modelBuilder.Entity("Entities.Concretes.AccountSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AccountId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SessionId");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("Status");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("SessionId");

                    b.HasIndex(new[] { "Id" }, "UK_Id")
                        .IsUnique();

                    b.ToTable("AccountSessions", (string)null);
                });

            modelBuilder.Entity("Entities.Concretes.AccountSkill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AccountId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SkillId");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("SkillId");

                    b.HasIndex(new[] { "Id" }, "UK_Id")
                        .IsUnique();

                    b.ToTable("AccountSkills", (string)null);
                });

            modelBuilder.Entity("Entities.Concretes.AccountSocialMedia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AccountId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SocialMediaId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SocialMediaId");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Url");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("SocialMediaId");

                    b.HasIndex(new[] { "Id" }, "UK_Id")
                        .IsUnique();

                    b.ToTable("AccountSocialMedias", (string)null);
                });

            modelBuilder.Entity("Entities.Concretes.AccountUniversity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<Guid?>("AccountId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AccountId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DegreeTypeId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DegreeTypeId");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EndDate")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("EndDate");

                    b.Property<bool>("IsEducationActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsEducationActive");

                    b.Property<string>("StartDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("StartDate");

                    b.Property<Guid?>("UniversityDepartmentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UniversityDepartmentId");

                    b.Property<Guid?>("UniversityId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UniversityId");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("DegreeTypeId");

                    b.HasIndex("UniversityDepartmentId");

                    b.HasIndex("UniversityId");

                    b.HasIndex(new[] { "Id" }, "UK_Id")
                        .IsUnique();

                    b.ToTable("AccountUniversities", (string)null);
                });

            modelBuilder.Entity("Entities.Concretes.AccountViewLesson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AccountId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LessonId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LessonId");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("LessonId");

                    b.HasIndex(new[] { "Id" }, "UK_Id")
                        .IsUnique();

                    b.ToTable("AccountViewLessons", (string)null);
                });

            modelBuilder.Entity("Entities.Concretes.ActivityMap", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "UK_Id")
                        .IsUnique();

                    b.ToTable("ActivityMaps", (string)null);
                });

            modelBuilder.Entity("Entities.Concretes.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AccountId");

                    b.Property<string>("AddressDetail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AddressDetail");

                    b.Property<Guid?>("CityId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CityId");

                    b.Property<Guid?>("CountryId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CountryId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DistrictId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DistrictId");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("DistrictId");

                    b.HasIndex(new[] { "Id" }, "UK_Id")
                        .IsUnique();

                    b.ToTable("Addresses", (string)null);
                });

            modelBuilder.Entity("Entities.Concretes.Announcement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("AnnouncementDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("AnnouncementDate");

                    b.Property<Guid>("AnnouncementTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Title");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AnnouncementTypeId");

                    b.HasIndex(new[] { "Id" }, "UK_Id")
                        .IsUnique();

                    b.ToTable("Announcements", (string)null);
                });

            modelBuilder.Entity("Entities.Concretes.AnnouncementProject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<Guid>("AnnouncementId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AnnouncementId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProjectId");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AnnouncementId");

                    b.HasIndex("ProjectId");

                    b.HasIndex(new[] { "Id" }, "UK_Id")
                        .IsUnique();

                    b.ToTable("AnnouncementProjects", (string)null);
                });

            modelBuilder.Entity("Entities.Concretes.AnnouncementRead", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AccountId");

                    b.Property<Guid>("AnnouncementId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AnnouncementId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("AnnouncementId");

                    b.HasIndex(new[] { "Id" }, "UK_Id")
                        .IsUnique();

                    b.ToTable("AnnouncementReads", (string)null);
                });

            modelBuilder.Entity("Entities.Concretes.AnnouncementType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "UK_Id")
                        .IsUnique();

                    b.ToTable("AnnouncementTypes", (string)null);
                });

            modelBuilder.Entity("Entities.Concretes.Badge", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThumbnailPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ThumbnailPath");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "UK_Id")
                        .IsUnique();

                    b.ToTable("Badges", (string)null);
                });

            modelBuilder.Entity("Entities.Concretes.Blog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ReleaseDate");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Title");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "UK_Id")
                        .IsUnique();

                    b.ToTable("Blogs", (string)null);
                });

            modelBuilder.Entity("Entities.Concretes.BlogImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<Guid>("BlogId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("BlogId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ImagePath");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.HasIndex(new[] { "Id" }, "UK_Id")
                        .IsUnique();

                    b.ToTable("BlogImages", (string)null);
                });

            modelBuilder.Entity("Entities.Concretes.Certificate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<string>("FolderPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FolderPath");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex(new[] { "Id" }, "UK_Id")
                        .IsUnique();

                    b.ToTable("Certificates", (string)null);
                });

            modelBuilder.Entity("Entities.Concretes.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CountryId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex(new[] { "Id" }, "UK_Id")
                        .IsUnique();

                    b.ToTable("Cities", (string)null);
                });

            modelBuilder.Entity("Entities.Concretes.CompetenceCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("CompetenceCategories", (string)null);
                });

            modelBuilder.Entity("Entities.Concretes.CompetenceQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<Guid>("CompetenceCategoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CompetenceCategoryId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<int>("MaxOption")
                        .HasColumnType("int")
                        .HasColumnName("MaxOption");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompetenceCategoryId");

                    b.ToTable("CompetenceQuestions", (string)null);
                });

            modelBuilder.Entity("Entities.Concretes.CompetenceResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AccountId");

                    b.Property<Guid?>("CompetenceCategoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CompetenceCategoryId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Point")
                        .HasColumnType("float")
                        .HasColumnName("Point");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CompetenceCategoryId");

                    b.ToTable("CompetenceResults", (string)null);
                });

            modelBuilder.Entity("Entities.Concretes.CompetenceTest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<int>("QuestionCount")
                        .HasColumnType("int")
                        .HasColumnName("QuestionCount");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "UK_Id")
                        .IsUnique();

                    b.ToTable("CompetenceTests", (string)null);
                });

            modelBuilder.Entity("Entities.Concretes.CompetenceTestQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<Guid>("CompetenceQuestionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CompetenceQuestionId");

                    b.Property<Guid>("CompetenceTestId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CompetenceTestId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompetenceQuestionId");

                    b.HasIndex("CompetenceTestId");

                    b.HasIndex(new[] { "Id" }, "UK_Id")
                        .IsUnique();

                    b.ToTable("CompetenceTestQuestions", (string)null);
                });

            modelBuilder.Entity("Entities.Concretes.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FirstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LastName");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Message");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "UK_Id")
                        .IsUnique();

                    b.ToTable("Contacts", (string)null);
                });

            modelBuilder.Entity("Entities.Concretes.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "UK_Id")
                        .IsUnique();

                    b.HasIndex(new[] { "Name" }, "UK_Name")
                        .IsUnique();

                    b.ToTable("Countries", (string)null);
                });

            modelBuilder.Entity("Entities.Concretes.DegreeType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "UK_Id")
                        .IsUnique();

                    b.HasIndex(new[] { "Name" }, "UK_Name")
                        .IsUnique();

                    b.ToTable("DegreeTypes", (string)null);
                });

            modelBuilder.Entity("Entities.Concretes.District", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CityId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex(new[] { "Id" }, "UK_Id")
                        .IsUnique();

                    b.ToTable("Districts", (string)null);
                });

            modelBuilder.Entity("Entities.Concretes.EducationProgram", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("AuthorizedPerson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AuthorizedPerson");

                    b.Property<Guid>("BadgeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("BadgeId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2")
                        .HasColumnName("Deadline");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Duration");

                    b.Property<Guid>("EducationProgramDevelopmentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("EducationProgramDevelopmentId");

                    b.Property<Guid>("EducationProgramLevelId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("EducationProgramLevelId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Price");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("StartDate");

                    b.Property<string>("ThumbnailPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ThumbnailPath");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BadgeId");

                    b.HasIndex("EducationProgramDevelopmentId");

                    b.HasIndex("EducationProgramLevelId");

                    b.HasIndex(new[] { "Id" }, "UK_Id")
                        .IsUnique();

                    b.HasIndex(new[] { "Name" }, "UK_Name")
                        .IsUnique();

                    b.ToTable("EducationPrograms", (string)null);
                });

            modelBuilder.Entity("Entities.Concretes.EducationProgramDevelopment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "UK_Id")
                        .IsUnique();

                    b.HasIndex(new[] { "Name" }, "UK_Name")
                        .IsUnique();

                    b.ToTable("EducationProgramDevelopments", (string)null);
                });

            modelBuilder.Entity("Entities.Concretes.EducationProgramLesson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EducationProgramId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("EducationProgramId");

                    b.Property<Guid>("LessonId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LessonId");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EducationProgramId");

                    b.HasIndex("LessonId");

                    b.HasIndex(new[] { "Id" }, "UK_Id")
                        .IsUnique();

                    b.ToTable("EducationProgramLessons", (string)null);
                });

            modelBuilder.Entity("Entities.Concretes.EducationProgramLevel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "UK_Id")
                        .IsUnique();

                    b.HasIndex(new[] { "Name" }, "UK_Name")
                        .IsUnique();

                    b.ToTable("EducationProgramLevels", (string)null);
                });

            modelBuilder.Entity("Entities.Concretes.EducationProgramLike", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AccountId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EducationProgramId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("EducationProgramId");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("EducationProgramId");

                    b.HasIndex(new[] { "Id" }, "UK_Id")
                        .IsUnique();

                    b.ToTable("EducationProgramLikes", (string)null);
                });

            modelBuilder.Entity("Entities.Concretes.EducationProgramOccupationClass", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EducationProgramId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("EducationProgramId");

                    b.Property<Guid>("OccupationClassId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("OccupationClassId");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EducationProgramId");

                    b.HasIndex("OccupationClassId");

                    b.HasIndex(new[] { "Id" }, "UK_Id")
                        .IsUnique();

                    b.ToTable("EducationProgramOccupationClasses", (string)null);
                });

            modelBuilder.Entity("Entities.Concretes.EducationProgramProgrammingLanguage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProgrammingLanguageId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EducationProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProgrammingLanguageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EducationProgramId");

                    b.HasIndex("ProgrammingLanguageId");

                    b.HasIndex(new[] { "Id" }, "UK_Id")
                        .IsUnique();

                    b.ToTable("EducationProgramProgrammingLanguages", null, t =>
                        {
                            t.Property("ProgrammingLanguageId")
                                .HasColumnName("ProgrammingLanguageId1");
                        });
                });

            modelBuilder.Entity("Entities.Concretes.EducationProgramSubject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EducationProgramId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("EducationProgramId");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SubjectId");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EducationProgramId");

                    b.HasIndex("SubjectId");

                    b.ToTable("EducationProgramSubjects", (string)null);
                });

            modelBuilder.Entity("Entities.Concretes.Exam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<int>("Duration")
                        .HasColumnType("int")
                        .HasColumnName("Duration");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<int>("QuestionCount")
                        .HasColumnType("int")
                        .HasColumnName("QuestionCount");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "UK_Id")
                        .IsUnique();

                    b.ToTable("Exams", (string)null);
                });

            modelBuilder.Entity("Entities.Concretes.ExamOccupationClass", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ExamId");

                    b.Property<Guid>("OccupationClassId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("OccupationClassId");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.HasIndex("OccupationClassId");

                    b.HasIndex(new[] { "Id" }, "UK_Id")
                        .IsUnique();

                    b.ToTable("ExamOccupationClasses", (string)null);
                });

            modelBuilder.Entity("Entities.Concretes.ExamQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ExamId");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("QuestionId");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.HasIndex("QuestionId");

                    b.HasIndex(new[] { "Id" }, "UK_Id")
                        .IsUnique();

                    b.ToTable("ExamQuestions", (string)null);
                });

            modelBuilder.Entity("Entities.Concretes.ExamQuestionType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ExamId");

                    b.Property<Guid>("QuestionTypeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("QuestionTypeId");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.HasIndex("QuestionTypeId");

                    b.HasIndex(new[] { "Id" }, "UK_Id")
                        .IsUnique();

                    b.ToTable("ExamQuestionTypes", (string)null);
                });

            modelBuilder.Entity("Entities.Concretes.ExamResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AccountId");

                    b.Property<int>("CorrectOptionCount")
                        .HasColumnType("int")
                        .HasColumnName("CorrectOptionCount");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmptyOptionCount")
                        .HasColumnType("int")
                        .HasColumnName("EmptyOptionCount");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ExamId");

                    b.Property<int>("IncorrectOptionCount")
                        .HasColumnType("int")
                        .HasColumnName("IncorrectOptionCount");

                    b.Property<int>("Result")
                        .HasColumnType("int")
                        .HasColumnName("Result");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ExamId");

                    b.HasIndex(new[] { "Id" }, "UK_Id")
                        .IsUnique();

                    b.ToTable("ExamResults", (string)null);
                });

            modelBuilder.Entity("Entities.Concretes.Homework", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeadLine");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<Guid>("LessonId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LessonId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex(new[] { "Id" }, "UK_Id")
                        .IsUnique();

                    b.ToTable("Homeworks", (string)null);
                });

            modelBuilder.Entity("Entities.Concretes.Language", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "UK_Id")
                        .IsUnique();

                    b.ToTable("Languages", (string)null);
                });

            modelBuilder.Entity("Entities.Concretes.LanguageLevel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "UK_Id")
                        .IsUnique();

                    b.ToTable("LanguageLevels", (string)null);
                });

            modelBuilder.Entity("Entities.Concretes.Lesson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Duration")
                        .HasColumnType("int")
                        .HasColumnName("Duration");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("EndDate");

                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LanguageId");

                    b.Property<Guid>("LessonCategoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LessonCategoryId");

                    b.Property<Guid>("LessonModuleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LessonModuleId");

                    b.Property<string>("LessonPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LessonPath");

                    b.Property<Guid>("LessonSubTypeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LessonSubTypeId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<Guid>("ProductionCompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProductionCompanyId");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("StartDate");

                    b.Property<string>("ThumbnailPath")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ThumbnailPath");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("LessonCategoryId");

                    b.HasIndex("LessonModuleId");

                    b.HasIndex("LessonSubTypeId");

                    b.HasIndex("ProductionCompanyId");

                    b.HasIndex(new[] { "Id" }, "UK_Id")
                        .IsUnique();

                    b.ToTable("Lessons", (string)null);
                });

            modelBuilder.Entity("Entities.Concretes.LessonCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "UK_Id")
                        .IsUnique();

                    b.HasIndex(new[] { "Name" }, "UK_Name")
                        .IsUnique();

                    b.ToTable("LessonCategories", (string)null);
                });

            modelBuilder.Entity("Entities.Concretes.LessonLike", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AccountId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LessonId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LessonId");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("LessonId");

                    b.HasIndex(new[] { "Id" }, "UK_Id")
                        .IsUnique();

                    b.ToTable("LessonLikes", (string)null);
                });

            modelBuilder.Entity("Entities.Concretes.LessonModule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "UK_Id")
                        .IsUnique();

                    b.HasIndex(new[] { "Name" }, "UK_Name")
                        .IsUnique();

                    b.ToTable("LessonModules", (string)null);
                });

            modelBuilder.Entity("Entities.Concretes.LessonSubType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "UK_Id")
                        .IsUnique();

                    b.HasIndex(new[] { "Name" }, "UK_Name")
                        .IsUnique();

                    b.ToTable("LessonSubTypes", (string)null);
                });

            modelBuilder.Entity("Entities.Concretes.ManagementProgram", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "UK_Id")
                        .IsUnique();

                    b.ToTable("ManagementPrograms", (string)null);
                });

            modelBuilder.Entity("Entities.Concretes.MediaNew", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ReleaseDate");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Title");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "UK_Id")
                        .IsUnique();

                    b.ToTable("MediaNews", (string)null);
                });

            modelBuilder.Entity("Entities.Concretes.MediaNewImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ImagePath");

                    b.Property<Guid>("MediaNewId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("MediaNewId");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MediaNewId");

                    b.HasIndex(new[] { "Id" }, "UK_Id")
                        .IsUnique();

                    b.ToTable("MediaNewImages", (string)null);
                });

            modelBuilder.Entity("Entities.Concretes.Occupation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "UK_Id")
                        .IsUnique();

                    b.HasIndex(new[] { "Name" }, "UK_Name")
                        .IsUnique();

                    b.ToTable("Occupations", (string)null);
                });

            modelBuilder.Entity("Entities.Concretes.OccupationClass", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "UK_Id")
                        .IsUnique();

                    b.HasIndex(new[] { "Name" }, "UK_Name")
                        .IsUnique();

                    b.ToTable("OccupationClasses", (string)null);
                });

            modelBuilder.Entity("Entities.Concretes.OccupationClassSurvey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OccupationClassId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("OccupationClassId");

                    b.Property<Guid>("SurveyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SurveyId");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OccupationClassId");

                    b.HasIndex("SurveyId");

                    b.HasIndex(new[] { "Id" }, "UK_Id")
                        .IsUnique();

                    b.ToTable("OccupationClassSurveys", (string)null);
                });

            modelBuilder.Entity("Entities.Concretes.ProductionCompany", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "UK_Id")
                        .IsUnique();

                    b.HasIndex(new[] { "Name" }, "UK_Name")
                        .IsUnique();

                    b.ToTable("ProductionCompanies", (string)null);
                });

            modelBuilder.Entity("Entities.Concretes.ProgrammingLanguage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "UK_Id")
                        .IsUnique();

                    b.HasIndex(new[] { "Name" }, "UK_Name")
                        .IsUnique();

                    b.ToTable("ProgrammingLanguages", (string)null);
                });

            modelBuilder.Entity("Entities.Concretes.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "UK_Id")
                        .IsUnique();

                    b.ToTable("Projects", (string)null);
                });

            modelBuilder.Entity("Entities.Concretes.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("CorrectOption")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CorrectOption");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<string>("OptionA")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("OptionA");

                    b.Property<string>("OptionB")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("OptionB");

                    b.Property<string>("OptionC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("OptionC");

                    b.Property<string>("OptionD")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("OptionD");

                    b.Property<Guid>("QuestionTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("QuestionTypeId");

                    b.HasIndex(new[] { "Id" }, "UK_Id")
                        .IsUnique();

                    b.ToTable("Questions", (string)null);
                });

            modelBuilder.Entity("Entities.Concretes.QuestionType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "UK_Id")
                        .IsUnique();

                    b.HasIndex(new[] { "Name" }, "UK_Name")
                        .IsUnique();

                    b.ToTable("QuestionTypes", (string)null);
                });

            modelBuilder.Entity("Entities.Concretes.Session", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("EndDate");

                    b.Property<Guid>("LessonId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LessonId");

                    b.Property<string>("RecordPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RecordPath");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("StartDate");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex(new[] { "Id" }, "UK_Id")
                        .IsUnique();

                    b.ToTable("Sessions", (string)null);
                });

            modelBuilder.Entity("Entities.Concretes.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "UK_Id")
                        .IsUnique();

                    b.HasIndex(new[] { "Name" }, "UK_Name")
                        .IsUnique();

                    b.ToTable("Skills", (string)null);
                });

            modelBuilder.Entity("Entities.Concretes.SocialMedia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IconPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("IconPath");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "UK_Id")
                        .IsUnique();

                    b.HasIndex(new[] { "Name" }, "UK_Name")
                        .IsUnique();

                    b.ToTable("SocialMedias", (string)null);
                });

            modelBuilder.Entity("Entities.Concretes.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "UK_Id")
                        .IsUnique();

                    b.HasIndex(new[] { "Name" }, "UK_Name")
                        .IsUnique();

                    b.ToTable("Subjects", (string)null);
                });

            modelBuilder.Entity("Entities.Concretes.Survey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("ConnectionLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ConnectionLink");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Content");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Title");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "UK_Id")
                        .IsUnique();

                    b.ToTable("Surveys", (string)null);
                });

            modelBuilder.Entity("Entities.Concretes.University", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "UK_Id")
                        .IsUnique();

                    b.HasIndex(new[] { "Name" }, "UK_Name")
                        .IsUnique();

                    b.ToTable("Universities", (string)null);
                });

            modelBuilder.Entity("Entities.Concretes.UniversityDepartment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Name");

                    b.Property<Guid>("UniversityId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UniversityId");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("UniversityId");

                    b.HasIndex(new[] { "Id" }, "UK_Id")
                        .IsUnique();

                    b.HasIndex(new[] { "Name" }, "UK_Name")
                        .IsUnique();

                    b.ToTable("UniversityDepartments", (string)null);
                });

            modelBuilder.Entity("Entities.Concretes.WorkExperience", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CityId");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CompanyName");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Department");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<DateTime?>("EndDate")
                        .IsRequired()
                        .HasColumnType("datetime2")
                        .HasColumnName("EndDate");

                    b.Property<string>("Industry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Industry");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("StartDate");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CityId");

                    b.HasIndex(new[] { "Id" }, "UK_Id")
                        .IsUnique();

                    b.ToTable("WorkExperiences", (string)null);
                });

            modelBuilder.Entity("Core.Entities.UserOperationClaim", b =>
                {
                    b.HasOne("Core.Entities.OperationClaim", "OperationClaim")
                        .WithMany("UserOperationClaims")
                        .HasForeignKey("OperationClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.User", "User")
                        .WithMany("UserOperationClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OperationClaim");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Concretes.Account", b =>
                {
                    b.HasOne("Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Concretes.AccountActivityMap", b =>
                {
                    b.HasOne("Entities.Concretes.Account", "Account")
                        .WithMany("ActivityMaps")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concretes.ActivityMap", "ActivityMap")
                        .WithMany("Accounts")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("ActivityMap");
                });

            modelBuilder.Entity("Entities.Concretes.AccountAnswer", b =>
                {
                    b.HasOne("Entities.Concretes.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concretes.Exam", "Exam")
                        .WithMany()
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concretes.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Exam");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Entities.Concretes.AccountBadge", b =>
                {
                    b.HasOne("Entities.Concretes.Account", "Account")
                        .WithMany("AccountBadges")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concretes.Badge", "Badge")
                        .WithMany("AccountBadges")
                        .HasForeignKey("BadgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Badge");
                });

            modelBuilder.Entity("Entities.Concretes.AccountCompetenceTest", b =>
                {
                    b.HasOne("Entities.Concretes.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concretes.CompetenceTest", "CompetenceTest")
                        .WithMany("AccountCompetenceTests")
                        .HasForeignKey("CompetenceTestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("CompetenceTest");
                });

            modelBuilder.Entity("Entities.Concretes.AccountEducationProgram", b =>
                {
                    b.HasOne("Entities.Concretes.Account", "Account")
                        .WithMany("AccountEducationPrograms")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concretes.EducationProgram", "EducationProgram")
                        .WithMany("AccountEducationPrograms")
                        .HasForeignKey("EducationProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("EducationProgram");
                });

            modelBuilder.Entity("Entities.Concretes.AccountFavoriteEducationProgram", b =>
                {
                    b.HasOne("Entities.Concretes.Account", "Account")
                        .WithMany("AccountFavoriteEducationPrograms")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concretes.EducationProgram", "EducationProgram")
                        .WithMany("AccountFavoriteEducationPrograms")
                        .HasForeignKey("EducationProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("EducationProgram");
                });

            modelBuilder.Entity("Entities.Concretes.AccountHomework", b =>
                {
                    b.HasOne("Entities.Concretes.Account", "Account")
                        .WithMany("AccountHomeworks")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concretes.Homework", "Homework")
                        .WithMany("AccountHomeworks")
                        .HasForeignKey("HomeworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Homework");
                });

            modelBuilder.Entity("Entities.Concretes.AccountLanguage", b =>
                {
                    b.HasOne("Entities.Concretes.Account", "Account")
                        .WithMany("AccountLanguages")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concretes.Language", "Language")
                        .WithMany("AccountLanguages")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concretes.LanguageLevel", "LanguageLevel")
                        .WithMany()
                        .HasForeignKey("LanguageLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Language");

                    b.Navigation("LanguageLevel");
                });

            modelBuilder.Entity("Entities.Concretes.AccountLesson", b =>
                {
                    b.HasOne("Entities.Concretes.Account", "Account")
                        .WithMany("AccountLessons")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concretes.Lesson", "Lesson")
                        .WithMany("AccountLessons")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("Entities.Concretes.AccountOccupationClass", b =>
                {
                    b.HasOne("Entities.Concretes.Account", "Account")
                        .WithMany("AccountOccupationClasses")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concretes.OccupationClass", "OccupationClass")
                        .WithMany("AccountOccupationClasses")
                        .HasForeignKey("OccupationClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("OccupationClass");
                });

            modelBuilder.Entity("Entities.Concretes.AccountSession", b =>
                {
                    b.HasOne("Entities.Concretes.Account", "Account")
                        .WithMany("AccountSessions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concretes.Session", "Session")
                        .WithMany("AccountSessions")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("Entities.Concretes.AccountSkill", b =>
                {
                    b.HasOne("Entities.Concretes.Account", "Account")
                        .WithMany("AccountSkills")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concretes.Skill", "Skill")
                        .WithMany("AccountSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Entities.Concretes.AccountSocialMedia", b =>
                {
                    b.HasOne("Entities.Concretes.Account", "Account")
                        .WithMany("AccountSocialMedias")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concretes.SocialMedia", "SocialMedia")
                        .WithMany("AccountSocialMedias")
                        .HasForeignKey("SocialMediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("SocialMedia");
                });

            modelBuilder.Entity("Entities.Concretes.AccountUniversity", b =>
                {
                    b.HasOne("Entities.Concretes.Account", "Account")
                        .WithMany("AccountUniversities")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concretes.DegreeType", "DegreeType")
                        .WithMany()
                        .HasForeignKey("DegreeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concretes.UniversityDepartment", "UniversityDepartment")
                        .WithMany()
                        .HasForeignKey("UniversityDepartmentId");

                    b.HasOne("Entities.Concretes.University", "University")
                        .WithMany("AccountUniversities")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("DegreeType");

                    b.Navigation("University");

                    b.Navigation("UniversityDepartment");
                });

            modelBuilder.Entity("Entities.Concretes.AccountViewLesson", b =>
                {
                    b.HasOne("Entities.Concretes.Account", "Account")
                        .WithMany("AccountViewLessons")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concretes.Lesson", "Lesson")
                        .WithMany("AccountViewLessons")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("Entities.Concretes.Address", b =>
                {
                    b.HasOne("Entities.Concretes.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.HasOne("Entities.Concretes.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("Entities.Concretes.Country", "Country")
                        .WithMany("Addresses")
                        .HasForeignKey("CountryId");

                    b.HasOne("Entities.Concretes.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId");

                    b.Navigation("Account");

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("District");
                });

            modelBuilder.Entity("Entities.Concretes.Announcement", b =>
                {
                    b.HasOne("Entities.Concretes.AnnouncementType", "AnnouncementType")
                        .WithMany()
                        .HasForeignKey("AnnouncementTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnnouncementType");
                });

            modelBuilder.Entity("Entities.Concretes.AnnouncementProject", b =>
                {
                    b.HasOne("Entities.Concretes.Announcement", "Announcement")
                        .WithMany("AnnouncementProjects")
                        .HasForeignKey("AnnouncementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concretes.Project", "Project")
                        .WithMany("AnnouncementProjects")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Announcement");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Entities.Concretes.AnnouncementRead", b =>
                {
                    b.HasOne("Entities.Concretes.Account", "Account")
                        .WithMany("AnnouncementReads")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concretes.Announcement", "Announcement")
                        .WithMany("AnnouncementReads")
                        .HasForeignKey("AnnouncementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Announcement");
                });

            modelBuilder.Entity("Entities.Concretes.BlogImage", b =>
                {
                    b.HasOne("Entities.Concretes.Blog", "Blog")
                        .WithMany()
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");
                });

            modelBuilder.Entity("Entities.Concretes.Certificate", b =>
                {
                    b.HasOne("Entities.Concretes.Account", "Account")
                        .WithMany("Certificates")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Entities.Concretes.City", b =>
                {
                    b.HasOne("Entities.Concretes.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Entities.Concretes.CompetenceQuestion", b =>
                {
                    b.HasOne("Entities.Concretes.CompetenceCategory", "CompetenceCategory")
                        .WithMany("CompetenceQuestions")
                        .HasForeignKey("CompetenceCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompetenceCategory");
                });

            modelBuilder.Entity("Entities.Concretes.CompetenceResult", b =>
                {
                    b.HasOne("Entities.Concretes.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.HasOne("Entities.Concretes.CompetenceCategory", "CompetenceCategory")
                        .WithMany()
                        .HasForeignKey("CompetenceCategoryId");

                    b.Navigation("Account");

                    b.Navigation("CompetenceCategory");
                });

            modelBuilder.Entity("Entities.Concretes.CompetenceTestQuestion", b =>
                {
                    b.HasOne("Entities.Concretes.CompetenceQuestion", "CompetenceQuestion")
                        .WithMany("CompetenceTestQuestions")
                        .HasForeignKey("CompetenceQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concretes.CompetenceTest", "CompetenceTest")
                        .WithMany("CompetenceTestQuestions")
                        .HasForeignKey("CompetenceTestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompetenceQuestion");

                    b.Navigation("CompetenceTest");
                });

            modelBuilder.Entity("Entities.Concretes.District", b =>
                {
                    b.HasOne("Entities.Concretes.City", "City")
                        .WithMany("Districts")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Entities.Concretes.EducationProgram", b =>
                {
                    b.HasOne("Entities.Concretes.Badge", "Badge")
                        .WithMany()
                        .HasForeignKey("BadgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concretes.EducationProgramDevelopment", "EducationProgramDevelopment")
                        .WithMany("EducationPrograms")
                        .HasForeignKey("EducationProgramDevelopmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concretes.EducationProgramLevel", "EducationProgramLevel")
                        .WithMany("EducationPrograms")
                        .HasForeignKey("EducationProgramLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Badge");

                    b.Navigation("EducationProgramDevelopment");

                    b.Navigation("EducationProgramLevel");
                });

            modelBuilder.Entity("Entities.Concretes.EducationProgramLesson", b =>
                {
                    b.HasOne("Entities.Concretes.EducationProgram", "EducationProgram")
                        .WithMany("EducationProgramLessons")
                        .HasForeignKey("EducationProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concretes.Lesson", "Lesson")
                        .WithMany("EducationProgramLessons")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EducationProgram");

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("Entities.Concretes.EducationProgramLike", b =>
                {
                    b.HasOne("Entities.Concretes.Account", "Account")
                        .WithMany("EducationProgramLikes")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concretes.EducationProgram", "EducationProgram")
                        .WithMany()
                        .HasForeignKey("EducationProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("EducationProgram");
                });

            modelBuilder.Entity("Entities.Concretes.EducationProgramOccupationClass", b =>
                {
                    b.HasOne("Entities.Concretes.EducationProgram", "EducationProgram")
                        .WithMany("EducationProgramOccupationClasses")
                        .HasForeignKey("EducationProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concretes.OccupationClass", "OccupationClass")
                        .WithMany("EducationProgramOccupationClasses")
                        .HasForeignKey("OccupationClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EducationProgram");

                    b.Navigation("OccupationClass");
                });

            modelBuilder.Entity("Entities.Concretes.EducationProgramProgrammingLanguage", b =>
                {
                    b.HasOne("Entities.Concretes.EducationProgram", "EducationProgram")
                        .WithMany("EducationProgramProgrammingLanguages")
                        .HasForeignKey("EducationProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concretes.ProgrammingLanguage", "ProgrammingLanguage")
                        .WithMany("EducationProgramProgrammingLanguages")
                        .HasForeignKey("ProgrammingLanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EducationProgram");

                    b.Navigation("ProgrammingLanguage");
                });

            modelBuilder.Entity("Entities.Concretes.EducationProgramSubject", b =>
                {
                    b.HasOne("Entities.Concretes.EducationProgram", "EducationProgram")
                        .WithMany("EducationProgramSubjects")
                        .HasForeignKey("EducationProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concretes.Subject", "Subject")
                        .WithMany("EducationProgramSubjects")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EducationProgram");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Entities.Concretes.ExamOccupationClass", b =>
                {
                    b.HasOne("Entities.Concretes.Exam", "Exam")
                        .WithMany("ExamOccupationClasses")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concretes.OccupationClass", "OccupationClass")
                        .WithMany("ExamOccupationClasses")
                        .HasForeignKey("OccupationClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("OccupationClass");
                });

            modelBuilder.Entity("Entities.Concretes.ExamQuestion", b =>
                {
                    b.HasOne("Entities.Concretes.Exam", "Exam")
                        .WithMany("ExamQuestions")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concretes.Question", "Question")
                        .WithMany("ExamQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Entities.Concretes.ExamQuestionType", b =>
                {
                    b.HasOne("Entities.Concretes.Exam", "Exam")
                        .WithMany()
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concretes.QuestionType", "QuestionType")
                        .WithMany()
                        .HasForeignKey("QuestionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("QuestionType");
                });

            modelBuilder.Entity("Entities.Concretes.ExamResult", b =>
                {
                    b.HasOne("Entities.Concretes.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concretes.Exam", "Exam")
                        .WithMany()
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("Entities.Concretes.Homework", b =>
                {
                    b.HasOne("Entities.Concretes.Lesson", "Lesson")
                        .WithMany("Homeworks")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("Entities.Concretes.Lesson", b =>
                {
                    b.HasOne("Entities.Concretes.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concretes.LessonCategory", "LessonCategory")
                        .WithMany()
                        .HasForeignKey("LessonCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concretes.LessonModule", "LessonModule")
                        .WithMany()
                        .HasForeignKey("LessonModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concretes.LessonSubType", "LessonSubType")
                        .WithMany()
                        .HasForeignKey("LessonSubTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concretes.ProductionCompany", "ProductionCompany")
                        .WithMany("Lessons")
                        .HasForeignKey("ProductionCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("LessonCategory");

                    b.Navigation("LessonModule");

                    b.Navigation("LessonSubType");

                    b.Navigation("ProductionCompany");
                });

            modelBuilder.Entity("Entities.Concretes.LessonLike", b =>
                {
                    b.HasOne("Entities.Concretes.Account", "Account")
                        .WithMany("LessonLikes")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concretes.Lesson", "Lesson")
                        .WithMany("LessonLikes")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("Entities.Concretes.MediaNewImage", b =>
                {
                    b.HasOne("Entities.Concretes.MediaNew", "MediaNew")
                        .WithMany()
                        .HasForeignKey("MediaNewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MediaNew");
                });

            modelBuilder.Entity("Entities.Concretes.OccupationClassSurvey", b =>
                {
                    b.HasOne("Entities.Concretes.OccupationClass", "OccupationClass")
                        .WithMany("OccupationClassSurveys")
                        .HasForeignKey("OccupationClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concretes.Survey", "Survey")
                        .WithMany("OccupationClassSurveys")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OccupationClass");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("Entities.Concretes.Question", b =>
                {
                    b.HasOne("Entities.Concretes.QuestionType", "QuestionType")
                        .WithMany("Questions")
                        .HasForeignKey("QuestionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuestionType");
                });

            modelBuilder.Entity("Entities.Concretes.Session", b =>
                {
                    b.HasOne("Entities.Concretes.Lesson", "Lesson")
                        .WithMany("Sessions")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("Entities.Concretes.UniversityDepartment", b =>
                {
                    b.HasOne("Entities.Concretes.University", "University")
                        .WithMany()
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("University");
                });

            modelBuilder.Entity("Entities.Concretes.WorkExperience", b =>
                {
                    b.HasOne("Entities.Concretes.Account", "Account")
                        .WithMany("WorkExperiences")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concretes.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("City");
                });

            modelBuilder.Entity("Core.Entities.OperationClaim", b =>
                {
                    b.Navigation("UserOperationClaims");
                });

            modelBuilder.Entity("Core.Entities.User", b =>
                {
                    b.Navigation("UserOperationClaims");
                });

            modelBuilder.Entity("Entities.Concretes.Account", b =>
                {
                    b.Navigation("AccountBadges");

                    b.Navigation("AccountEducationPrograms");

                    b.Navigation("AccountFavoriteEducationPrograms");

                    b.Navigation("AccountHomeworks");

                    b.Navigation("AccountLanguages");

                    b.Navigation("AccountLessons");

                    b.Navigation("AccountOccupationClasses");

                    b.Navigation("AccountSessions");

                    b.Navigation("AccountSkills");

                    b.Navigation("AccountSocialMedias");

                    b.Navigation("AccountUniversities");

                    b.Navigation("AccountViewLessons");

                    b.Navigation("ActivityMaps");

                    b.Navigation("AnnouncementReads");

                    b.Navigation("Certificates");

                    b.Navigation("EducationProgramLikes");

                    b.Navigation("LessonLikes");

                    b.Navigation("WorkExperiences");
                });

            modelBuilder.Entity("Entities.Concretes.ActivityMap", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("Entities.Concretes.Announcement", b =>
                {
                    b.Navigation("AnnouncementProjects");

                    b.Navigation("AnnouncementReads");
                });

            modelBuilder.Entity("Entities.Concretes.Badge", b =>
                {
                    b.Navigation("AccountBadges");
                });

            modelBuilder.Entity("Entities.Concretes.City", b =>
                {
                    b.Navigation("Districts");
                });

            modelBuilder.Entity("Entities.Concretes.CompetenceCategory", b =>
                {
                    b.Navigation("CompetenceQuestions");
                });

            modelBuilder.Entity("Entities.Concretes.CompetenceQuestion", b =>
                {
                    b.Navigation("CompetenceTestQuestions");
                });

            modelBuilder.Entity("Entities.Concretes.CompetenceTest", b =>
                {
                    b.Navigation("AccountCompetenceTests");

                    b.Navigation("CompetenceTestQuestions");
                });

            modelBuilder.Entity("Entities.Concretes.Country", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("Entities.Concretes.EducationProgram", b =>
                {
                    b.Navigation("AccountEducationPrograms");

                    b.Navigation("AccountFavoriteEducationPrograms");

                    b.Navigation("EducationProgramLessons");

                    b.Navigation("EducationProgramOccupationClasses");

                    b.Navigation("EducationProgramProgrammingLanguages");

                    b.Navigation("EducationProgramSubjects");
                });

            modelBuilder.Entity("Entities.Concretes.EducationProgramDevelopment", b =>
                {
                    b.Navigation("EducationPrograms");
                });

            modelBuilder.Entity("Entities.Concretes.EducationProgramLevel", b =>
                {
                    b.Navigation("EducationPrograms");
                });

            modelBuilder.Entity("Entities.Concretes.Exam", b =>
                {
                    b.Navigation("ExamOccupationClasses");

                    b.Navigation("ExamQuestions");
                });

            modelBuilder.Entity("Entities.Concretes.Homework", b =>
                {
                    b.Navigation("AccountHomeworks");
                });

            modelBuilder.Entity("Entities.Concretes.Language", b =>
                {
                    b.Navigation("AccountLanguages");
                });

            modelBuilder.Entity("Entities.Concretes.Lesson", b =>
                {
                    b.Navigation("AccountLessons");

                    b.Navigation("AccountViewLessons");

                    b.Navigation("EducationProgramLessons");

                    b.Navigation("Homeworks");

                    b.Navigation("LessonLikes");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("Entities.Concretes.OccupationClass", b =>
                {
                    b.Navigation("AccountOccupationClasses");

                    b.Navigation("EducationProgramOccupationClasses");

                    b.Navigation("ExamOccupationClasses");

                    b.Navigation("OccupationClassSurveys");
                });

            modelBuilder.Entity("Entities.Concretes.ProductionCompany", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("Entities.Concretes.ProgrammingLanguage", b =>
                {
                    b.Navigation("EducationProgramProgrammingLanguages");
                });

            modelBuilder.Entity("Entities.Concretes.Project", b =>
                {
                    b.Navigation("AnnouncementProjects");
                });

            modelBuilder.Entity("Entities.Concretes.Question", b =>
                {
                    b.Navigation("ExamQuestions");
                });

            modelBuilder.Entity("Entities.Concretes.QuestionType", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Entities.Concretes.Session", b =>
                {
                    b.Navigation("AccountSessions");
                });

            modelBuilder.Entity("Entities.Concretes.Skill", b =>
                {
                    b.Navigation("AccountSkills");
                });

            modelBuilder.Entity("Entities.Concretes.SocialMedia", b =>
                {
                    b.Navigation("AccountSocialMedias");
                });

            modelBuilder.Entity("Entities.Concretes.Subject", b =>
                {
                    b.Navigation("EducationProgramSubjects");
                });

            modelBuilder.Entity("Entities.Concretes.Survey", b =>
                {
                    b.Navigation("OccupationClassSurveys");
                });

            modelBuilder.Entity("Entities.Concretes.University", b =>
                {
                    b.Navigation("AccountUniversities");
                });
#pragma warning restore 612, 618
        }
    }
}
